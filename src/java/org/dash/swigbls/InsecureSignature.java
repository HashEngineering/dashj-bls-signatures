/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.dash.swigbls;

public class InsecureSignature {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  protected InsecureSignature(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(InsecureSignature obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        blssignaturesJNI.delete_InsecureSignature(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public static InsecureSignature FromBytes(byte[] data) {
    return new InsecureSignature(blssignaturesJNI.InsecureSignature_FromBytes(data), true);
  }

  public static InsecureSignature FromG2(SWIGTYPE_p_g2_t element) {
    return new InsecureSignature(blssignaturesJNI.InsecureSignature_FromG2(SWIGTYPE_p_g2_t.getCPtr(element)), true);
  }

  public InsecureSignature(InsecureSignature signature) {
    this(blssignaturesJNI.new_InsecureSignature(InsecureSignature.getCPtr(signature), signature), true);
  }

  public boolean Verify(SWIGTYPE_p_std__vectorT_unsigned_char_const_p_t hashes, PublicKeyVector pubKeys) {
    return blssignaturesJNI.InsecureSignature_Verify(swigCPtr, this, SWIGTYPE_p_std__vectorT_unsigned_char_const_p_t.getCPtr(hashes), PublicKeyVector.getCPtr(pubKeys), pubKeys);
  }

  public static InsecureSignature Aggregate(SWIGTYPE_p_std__vectorT_bls__InsecureSignature_t sigs) {
    return new InsecureSignature(blssignaturesJNI.InsecureSignature_Aggregate(SWIGTYPE_p_std__vectorT_bls__InsecureSignature_t.getCPtr(sigs)), true);
  }

  public InsecureSignature DivideBy(SWIGTYPE_p_std__vectorT_bls__InsecureSignature_t sigs) {
    return new InsecureSignature(blssignaturesJNI.InsecureSignature_DivideBy(swigCPtr, this, SWIGTYPE_p_std__vectorT_bls__InsecureSignature_t.getCPtr(sigs)), true);
  }

  public void Serialize(byte[] buffer) {
    blssignaturesJNI.InsecureSignature_Serialize__SWIG_0(swigCPtr, this, buffer);
  }

  public SWIGTYPE_p_std__vectorT_unsigned_char_t Serialize() {
    return new SWIGTYPE_p_std__vectorT_unsigned_char_t(blssignaturesJNI.InsecureSignature_Serialize__SWIG_1(swigCPtr, this), true);
  }

  public final static long SIGNATURE_SIZE = blssignaturesJNI.InsecureSignature_SIGNATURE_SIZE_get();
}
