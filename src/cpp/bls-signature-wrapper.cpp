/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGJAVA
#define SWIGJAVA
#endif



#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else


#include "bls-signatures/src/bls.hpp"
#include "bls-signatures/src/chaincode.hpp"
#include "bls-signatures/src/extendedprivatekey.hpp"
#include "bls-signatures/src/extendedpublickey.hpp"
#include "bls-signatures/src/privatekey.hpp"
#include "bls-signatures/src/publickey.hpp"
#include "bls-signatures/src/signature.hpp"
using namespace bls; //this fixes many undefined symbols


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jstring JNICALL Java_org_dash_blssignatures_blssignaturesJNI_BLS_1GROUP_1ORDER_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)(char *)bls::BLS::GROUP_ORDER;
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_dash_blssignatures_blssignaturesJNI_BLS_1MESSAGE_1HASH_1LEN_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  result = bls::BLS::MESSAGE_HASH_LEN;
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_dash_blssignatures_blssignaturesJNI_BLS_1Init(JNIEnv *jenv, jclass jcls) {
  jboolean jresult = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  result = (bool)bls::BLS::Init();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_dash_blssignatures_blssignaturesJNI_BLS_1AssertInitialized(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  bls::BLS::AssertInitialized();
}


SWIGEXPORT void JNICALL Java_org_dash_blssignatures_blssignaturesJNI_BLS_1Clean(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  bls::BLS::Clean();
}


SWIGEXPORT void JNICALL Java_org_dash_blssignatures_blssignaturesJNI_BLS_1HashPubKeys(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4) {
  bn_t *arg1 = (bn_t *) 0 ;
  size_t arg2 ;
  std::vector< uint8_t * > *arg3 = 0 ;
  std::vector< size_t > *arg4 = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(bn_t **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = *(std::vector< uint8_t * > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< uint8_t * > const & reference is null");
    return ;
  } 
  arg4 = *(std::vector< size_t > **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< size_t > const & reference is null");
    return ;
  } 
  bls::BLS::HashPubKeys(arg1,arg2,(std::vector< uint8_t * > const &)*arg3,(std::vector< size_t > const &)*arg4);
}


SWIGEXPORT void JNICALL Java_org_dash_blssignatures_blssignaturesJNI_BLS_1CheckRelicErrors(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  bls::BLS::CheckRelicErrors();
}


SWIGEXPORT jlong JNICALL Java_org_dash_blssignatures_blssignaturesJNI_new_1BLS(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  bls::BLS *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (bls::BLS *)new bls::BLS();
  *(bls::BLS **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_dash_blssignatures_blssignaturesJNI_delete_1BLS(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  bls::BLS *arg1 = (bls::BLS *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(bls::BLS **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_dash_blssignatures_blssignaturesJNI_ChainCode_1CHAIN_1CODE_1SIZE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  result = bls::ChainCode::CHAIN_CODE_SIZE;
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_dash_blssignatures_blssignaturesJNI_ChainCode_1FromBytes(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  uint8_t *arg1 = (uint8_t *) 0 ;
  SwigValueWrapper< bls::ChainCode > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(uint8_t **)&jarg1; 
  result = bls::ChainCode::FromBytes((uint8_t const *)arg1);
  *(bls::ChainCode **)&jresult = new bls::ChainCode((const bls::ChainCode &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_dash_blssignatures_blssignaturesJNI_new_1ChainCode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  bls::ChainCode *arg1 = 0 ;
  bls::ChainCode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bls::ChainCode **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "bls::ChainCode const & reference is null");
    return 0;
  } 
  result = (bls::ChainCode *)new bls::ChainCode((bls::ChainCode const &)*arg1);
  *(bls::ChainCode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_dash_blssignatures_blssignaturesJNI_ChainCode_1Serialize_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  bls::ChainCode *arg1 = (bls::ChainCode *) 0 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bls::ChainCode **)&jarg1; 
  arg2 = *(uint8_t **)&jarg2; 
  ((bls::ChainCode const *)arg1)->Serialize(arg2);
}


SWIGEXPORT jlong JNICALL Java_org_dash_blssignatures_blssignaturesJNI_ChainCode_1Serialize_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  bls::ChainCode *arg1 = (bls::ChainCode *) 0 ;
  std::vector< uint8_t > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bls::ChainCode **)&jarg1; 
  result = ((bls::ChainCode const *)arg1)->Serialize();
  *(std::vector< uint8_t > **)&jresult = new std::vector< uint8_t >((const std::vector< uint8_t > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_dash_blssignatures_blssignaturesJNI_delete_1ChainCode(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  bls::ChainCode *arg1 = (bls::ChainCode *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(bls::ChainCode **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_dash_blssignatures_blssignaturesJNI_ExtendedPrivateKey_1EXTENDED_1PRIVATE_1KEY_1SIZE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  result = bls::ExtendedPrivateKey::EXTENDED_PRIVATE_KEY_SIZE;
  *(uint32_t **)&jresult = new uint32_t((const uint32_t &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_dash_blssignatures_blssignaturesJNI_ExtendedPrivateKey_1FromSeed(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  uint8_t *arg1 = (uint8_t *) 0 ;
  size_t arg2 ;
  SwigValueWrapper< bls::ExtendedPrivateKey > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(uint8_t **)&jarg1; 
  arg2 = (size_t)jarg2; 
  result = bls::ExtendedPrivateKey::FromSeed((uint8_t const *)arg1,arg2);
  *(bls::ExtendedPrivateKey **)&jresult = new bls::ExtendedPrivateKey((const bls::ExtendedPrivateKey &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_dash_blssignatures_blssignaturesJNI_ExtendedPrivateKey_1FromBytes(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  uint8_t *arg1 = (uint8_t *) 0 ;
  SwigValueWrapper< bls::ExtendedPrivateKey > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(uint8_t **)&jarg1; 
  result = bls::ExtendedPrivateKey::FromBytes((uint8_t const *)arg1);
  *(bls::ExtendedPrivateKey **)&jresult = new bls::ExtendedPrivateKey((const bls::ExtendedPrivateKey &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_dash_blssignatures_blssignaturesJNI_ExtendedPrivateKey_1PrivateChild(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  bls::ExtendedPrivateKey *arg1 = (bls::ExtendedPrivateKey *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  SwigValueWrapper< bls::ExtendedPrivateKey > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bls::ExtendedPrivateKey **)&jarg1; 
  argp2 = *(uint32_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null uint32_t");
    return 0;
  }
  arg2 = *argp2; 
  result = ((bls::ExtendedPrivateKey const *)arg1)->PrivateChild(arg2);
  *(bls::ExtendedPrivateKey **)&jresult = new bls::ExtendedPrivateKey((const bls::ExtendedPrivateKey &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_dash_blssignatures_blssignaturesJNI_ExtendedPrivateKey_1PublicChild(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  bls::ExtendedPrivateKey *arg1 = (bls::ExtendedPrivateKey *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bls::ExtendedPrivateKey **)&jarg1; 
  argp2 = *(uint32_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null uint32_t");
    return 0;
  }
  arg2 = *argp2; 
  ExtendedPublicKey result = ((bls::ExtendedPrivateKey const *)arg1)->PublicChild(arg2);
  *(ExtendedPublicKey **)&jresult = new ExtendedPublicKey((const ExtendedPublicKey &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_dash_blssignatures_blssignaturesJNI_ExtendedPrivateKey_1GetVersion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  bls::ExtendedPrivateKey *arg1 = (bls::ExtendedPrivateKey *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bls::ExtendedPrivateKey **)&jarg1; 
  result = ((bls::ExtendedPrivateKey const *)arg1)->GetVersion();
  *(uint32_t **)&jresult = new uint32_t((const uint32_t &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_dash_blssignatures_blssignaturesJNI_ExtendedPrivateKey_1GetDepth(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  bls::ExtendedPrivateKey *arg1 = (bls::ExtendedPrivateKey *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bls::ExtendedPrivateKey **)&jarg1; 
  result = ((bls::ExtendedPrivateKey const *)arg1)->GetDepth();
  *(uint8_t **)&jresult = new uint8_t((const uint8_t &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_dash_blssignatures_blssignaturesJNI_ExtendedPrivateKey_1GetParentFingerprint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  bls::ExtendedPrivateKey *arg1 = (bls::ExtendedPrivateKey *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bls::ExtendedPrivateKey **)&jarg1; 
  result = ((bls::ExtendedPrivateKey const *)arg1)->GetParentFingerprint();
  *(uint32_t **)&jresult = new uint32_t((const uint32_t &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_dash_blssignatures_blssignaturesJNI_ExtendedPrivateKey_1GetChildNumber(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  bls::ExtendedPrivateKey *arg1 = (bls::ExtendedPrivateKey *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bls::ExtendedPrivateKey **)&jarg1; 
  result = ((bls::ExtendedPrivateKey const *)arg1)->GetChildNumber();
  *(uint32_t **)&jresult = new uint32_t((const uint32_t &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_dash_blssignatures_blssignaturesJNI_ExtendedPrivateKey_1GetChainCode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  bls::ExtendedPrivateKey *arg1 = (bls::ExtendedPrivateKey *) 0 ;
  SwigValueWrapper< bls::ChainCode > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bls::ExtendedPrivateKey **)&jarg1; 
  result = ((bls::ExtendedPrivateKey const *)arg1)->GetChainCode();
  *(bls::ChainCode **)&jresult = new bls::ChainCode((const bls::ChainCode &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_dash_blssignatures_blssignaturesJNI_ExtendedPrivateKey_1GetPrivateKey(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  bls::ExtendedPrivateKey *arg1 = (bls::ExtendedPrivateKey *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bls::ExtendedPrivateKey **)&jarg1; 
  bls::PrivateKey result = ((bls::ExtendedPrivateKey const *)arg1)->GetPrivateKey();
  *(PrivateKey **)&jresult = new PrivateKey((const PrivateKey &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_dash_blssignatures_blssignaturesJNI_ExtendedPrivateKey_1GetPublicKey(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  bls::ExtendedPrivateKey *arg1 = (bls::ExtendedPrivateKey *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bls::ExtendedPrivateKey **)&jarg1; 
  bls::PublicKey result = ((bls::ExtendedPrivateKey const *)arg1)->GetPublicKey();
  *(PublicKey **)&jresult = new PublicKey((const PublicKey &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_dash_blssignatures_blssignaturesJNI_ExtendedPrivateKey_1GetExtendedPublicKey(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  bls::ExtendedPrivateKey *arg1 = (bls::ExtendedPrivateKey *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bls::ExtendedPrivateKey **)&jarg1; 
  ExtendedPublicKey result = ((bls::ExtendedPrivateKey const *)arg1)->GetExtendedPublicKey();
  *(ExtendedPublicKey **)&jresult = new ExtendedPublicKey((const ExtendedPublicKey &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_dash_blssignatures_blssignaturesJNI_ExtendedPrivateKey_1Serialize_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  bls::ExtendedPrivateKey *arg1 = (bls::ExtendedPrivateKey *) 0 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bls::ExtendedPrivateKey **)&jarg1; 
  arg2 = *(uint8_t **)&jarg2; 
  ((bls::ExtendedPrivateKey const *)arg1)->Serialize(arg2);
}


SWIGEXPORT jlong JNICALL Java_org_dash_blssignatures_blssignaturesJNI_ExtendedPrivateKey_1Serialize_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  bls::ExtendedPrivateKey *arg1 = (bls::ExtendedPrivateKey *) 0 ;
  std::vector< uint8_t > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bls::ExtendedPrivateKey **)&jarg1; 
  result = ((bls::ExtendedPrivateKey const *)arg1)->Serialize();
  *(std::vector< uint8_t > **)&jresult = new std::vector< uint8_t >((const std::vector< uint8_t > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_dash_blssignatures_blssignaturesJNI_delete_1ExtendedPrivateKey(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  bls::ExtendedPrivateKey *arg1 = (bls::ExtendedPrivateKey *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(bls::ExtendedPrivateKey **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_dash_blssignatures_blssignaturesJNI_ExtendedPublicKey_1VERSION_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  result = bls::ExtendedPublicKey::VERSION;
  *(uint32_t **)&jresult = new uint32_t((const uint32_t &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_dash_blssignatures_blssignaturesJNI_ExtendedPublicKey_1EXTENDED_1PUBLIC_1KEY_1SIZE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  result = bls::ExtendedPublicKey::EXTENDED_PUBLIC_KEY_SIZE;
  *(uint32_t **)&jresult = new uint32_t((const uint32_t &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_dash_blssignatures_blssignaturesJNI_ExtendedPublicKey_1FromBytes(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  uint8_t *arg1 = (uint8_t *) 0 ;
  SwigValueWrapper< bls::ExtendedPublicKey > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(uint8_t **)&jarg1; 
  result = bls::ExtendedPublicKey::FromBytes((uint8_t const *)arg1);
  *(bls::ExtendedPublicKey **)&jresult = new bls::ExtendedPublicKey((const bls::ExtendedPublicKey &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_dash_blssignatures_blssignaturesJNI_ExtendedPublicKey_1PublicChild(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  bls::ExtendedPublicKey *arg1 = (bls::ExtendedPublicKey *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  SwigValueWrapper< bls::ExtendedPublicKey > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bls::ExtendedPublicKey **)&jarg1; 
  argp2 = *(uint32_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null uint32_t");
    return 0;
  }
  arg2 = *argp2; 
  result = ((bls::ExtendedPublicKey const *)arg1)->PublicChild(arg2);
  *(bls::ExtendedPublicKey **)&jresult = new bls::ExtendedPublicKey((const bls::ExtendedPublicKey &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_dash_blssignatures_blssignaturesJNI_ExtendedPublicKey_1GetVersion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  bls::ExtendedPublicKey *arg1 = (bls::ExtendedPublicKey *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bls::ExtendedPublicKey **)&jarg1; 
  result = ((bls::ExtendedPublicKey const *)arg1)->GetVersion();
  *(uint32_t **)&jresult = new uint32_t((const uint32_t &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_dash_blssignatures_blssignaturesJNI_ExtendedPublicKey_1GetDepth(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  bls::ExtendedPublicKey *arg1 = (bls::ExtendedPublicKey *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bls::ExtendedPublicKey **)&jarg1; 
  result = ((bls::ExtendedPublicKey const *)arg1)->GetDepth();
  *(uint8_t **)&jresult = new uint8_t((const uint8_t &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_dash_blssignatures_blssignaturesJNI_ExtendedPublicKey_1GetParentFingerprint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  bls::ExtendedPublicKey *arg1 = (bls::ExtendedPublicKey *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bls::ExtendedPublicKey **)&jarg1; 
  result = ((bls::ExtendedPublicKey const *)arg1)->GetParentFingerprint();
  *(uint32_t **)&jresult = new uint32_t((const uint32_t &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_dash_blssignatures_blssignaturesJNI_ExtendedPublicKey_1GetChildNumber(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  bls::ExtendedPublicKey *arg1 = (bls::ExtendedPublicKey *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bls::ExtendedPublicKey **)&jarg1; 
  result = ((bls::ExtendedPublicKey const *)arg1)->GetChildNumber();
  *(uint32_t **)&jresult = new uint32_t((const uint32_t &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_dash_blssignatures_blssignaturesJNI_ExtendedPublicKey_1GetChainCode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  bls::ExtendedPublicKey *arg1 = (bls::ExtendedPublicKey *) 0 ;
  SwigValueWrapper< bls::ChainCode > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bls::ExtendedPublicKey **)&jarg1; 
  result = ((bls::ExtendedPublicKey const *)arg1)->GetChainCode();
  *(bls::ChainCode **)&jresult = new bls::ChainCode((const bls::ChainCode &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_dash_blssignatures_blssignaturesJNI_ExtendedPublicKey_1GetPublicKey(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  bls::ExtendedPublicKey *arg1 = (bls::ExtendedPublicKey *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bls::ExtendedPublicKey **)&jarg1; 
  PublicKey result = ((bls::ExtendedPublicKey const *)arg1)->GetPublicKey();
  *(PublicKey **)&jresult = new PublicKey((const PublicKey &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_dash_blssignatures_blssignaturesJNI_ExtendedPublicKey_1Serialize_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  bls::ExtendedPublicKey *arg1 = (bls::ExtendedPublicKey *) 0 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bls::ExtendedPublicKey **)&jarg1; 
  arg2 = *(uint8_t **)&jarg2; 
  ((bls::ExtendedPublicKey const *)arg1)->Serialize(arg2);
}


SWIGEXPORT jlong JNICALL Java_org_dash_blssignatures_blssignaturesJNI_ExtendedPublicKey_1Serialize_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  bls::ExtendedPublicKey *arg1 = (bls::ExtendedPublicKey *) 0 ;
  std::vector< uint8_t > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bls::ExtendedPublicKey **)&jarg1; 
  result = ((bls::ExtendedPublicKey const *)arg1)->Serialize();
  *(std::vector< uint8_t > **)&jresult = new std::vector< uint8_t >((const std::vector< uint8_t > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_dash_blssignatures_blssignaturesJNI_delete_1ExtendedPublicKey(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  bls::ExtendedPublicKey *arg1 = (bls::ExtendedPublicKey *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(bls::ExtendedPublicKey **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_dash_blssignatures_blssignaturesJNI_PrivateKey_1PRIVATE_1KEY_1SIZE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  result = bls::PrivateKey::PRIVATE_KEY_SIZE;
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_dash_blssignatures_blssignaturesJNI_PrivateKey_1FromSeed(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  uint8_t *arg1 = (uint8_t *) 0 ;
  size_t arg2 ;
  SwigValueWrapper< bls::PrivateKey > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(uint8_t **)&jarg1; 
  arg2 = (size_t)jarg2; 
  result = bls::PrivateKey::FromSeed((uint8_t const *)arg1,arg2);
  *(bls::PrivateKey **)&jresult = new bls::PrivateKey((const bls::PrivateKey &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_dash_blssignatures_blssignaturesJNI_PrivateKey_1FromBytes_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2) {
  jlong jresult = 0 ;
  uint8_t *arg1 = (uint8_t *) 0 ;
  bool arg2 ;
  SwigValueWrapper< bls::PrivateKey > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(uint8_t **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = bls::PrivateKey::FromBytes((uint8_t const *)arg1,arg2);
  *(bls::PrivateKey **)&jresult = new bls::PrivateKey((const bls::PrivateKey &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_dash_blssignatures_blssignaturesJNI_PrivateKey_1FromBytes_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  uint8_t *arg1 = (uint8_t *) 0 ;
  SwigValueWrapper< bls::PrivateKey > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(uint8_t **)&jarg1; 
  result = bls::PrivateKey::FromBytes((uint8_t const *)arg1);
  *(bls::PrivateKey **)&jresult = new bls::PrivateKey((const bls::PrivateKey &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_dash_blssignatures_blssignaturesJNI_new_1PrivateKey_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  bls::PrivateKey *arg1 = 0 ;
  bls::PrivateKey *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bls::PrivateKey **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "bls::PrivateKey const & reference is null");
    return 0;
  } 
  result = (bls::PrivateKey *)new bls::PrivateKey((bls::PrivateKey const &)*arg1);
  *(bls::PrivateKey **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_dash_blssignatures_blssignaturesJNI_delete_1PrivateKey(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  bls::PrivateKey *arg1 = (bls::PrivateKey *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(bls::PrivateKey **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_dash_blssignatures_blssignaturesJNI_PrivateKey_1GetPublicKey(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  bls::PrivateKey *arg1 = (bls::PrivateKey *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bls::PrivateKey **)&jarg1; 
  PublicKey result = ((bls::PrivateKey const *)arg1)->GetPublicKey();
  *(PublicKey **)&jresult = new PublicKey((const PublicKey &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_dash_blssignatures_blssignaturesJNI_PrivateKey_1AggregateInsecure(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< bls::PrivateKey > *arg1 = 0 ;
  SwigValueWrapper< bls::PrivateKey > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< bls::PrivateKey > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< bls::PrivateKey > const & reference is null");
    return 0;
  } 
  result = bls::PrivateKey::AggregateInsecure((std::vector< bls::PrivateKey > const &)*arg1);
  *(bls::PrivateKey **)&jresult = new bls::PrivateKey((const bls::PrivateKey &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_dash_blssignatures_blssignaturesJNI_PrivateKey_1Aggregate(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  std::vector< bls::PrivateKey > *arg1 = 0 ;
  std::vector< PublicKey > *arg2 = 0 ;
  SwigValueWrapper< bls::PrivateKey > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< bls::PrivateKey > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< bls::PrivateKey > const & reference is null");
    return 0;
  } 
  arg2 = *(std::vector< PublicKey > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< PublicKey > const & reference is null");
    return 0;
  } 
  result = bls::PrivateKey::Aggregate((std::vector< bls::PrivateKey > const &)*arg1,(std::vector< PublicKey > const &)*arg2);
  *(bls::PrivateKey **)&jresult = new bls::PrivateKey((const bls::PrivateKey &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_dash_blssignatures_blssignaturesJNI_PrivateKey_1Serialize_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  bls::PrivateKey *arg1 = (bls::PrivateKey *) 0 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bls::PrivateKey **)&jarg1; 
  arg2 = *(uint8_t **)&jarg2; 
  ((bls::PrivateKey const *)arg1)->Serialize(arg2);
}


SWIGEXPORT jlong JNICALL Java_org_dash_blssignatures_blssignaturesJNI_PrivateKey_1Serialize_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  bls::PrivateKey *arg1 = (bls::PrivateKey *) 0 ;
  std::vector< uint8_t > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bls::PrivateKey **)&jarg1; 
  result = ((bls::PrivateKey const *)arg1)->Serialize();
  *(std::vector< uint8_t > **)&jresult = new std::vector< uint8_t >((const std::vector< uint8_t > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_dash_blssignatures_blssignaturesJNI_PrivateKey_1SignInsecure(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  bls::PrivateKey *arg1 = (bls::PrivateKey *) 0 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  size_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bls::PrivateKey **)&jarg1; 
  arg2 = *(uint8_t **)&jarg2; 
  arg3 = (size_t)jarg3; 
  InsecureSignature result = ((bls::PrivateKey const *)arg1)->SignInsecure((uint8_t const *)arg2,arg3);
  *(InsecureSignature **)&jresult = new InsecureSignature((const InsecureSignature &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_dash_blssignatures_blssignaturesJNI_PrivateKey_1SignInsecurePrehashed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  bls::PrivateKey *arg1 = (bls::PrivateKey *) 0 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bls::PrivateKey **)&jarg1; 
  arg2 = *(uint8_t **)&jarg2; 
  InsecureSignature result = ((bls::PrivateKey const *)arg1)->SignInsecurePrehashed((uint8_t const *)arg2);
  *(InsecureSignature **)&jresult = new InsecureSignature((const InsecureSignature &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_dash_blssignatures_blssignaturesJNI_PrivateKey_1Sign(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  bls::PrivateKey *arg1 = (bls::PrivateKey *) 0 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  size_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bls::PrivateKey **)&jarg1; 
  arg2 = *(uint8_t **)&jarg2; 
  arg3 = (size_t)jarg3; 
  Signature result = ((bls::PrivateKey const *)arg1)->Sign((uint8_t const *)arg2,arg3);
  *(Signature **)&jresult = new Signature((const Signature &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_dash_blssignatures_blssignaturesJNI_PrivateKey_1SignPrehashed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  bls::PrivateKey *arg1 = (bls::PrivateKey *) 0 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bls::PrivateKey **)&jarg1; 
  arg2 = *(uint8_t **)&jarg2; 
  Signature result = ((bls::PrivateKey const *)arg1)->SignPrehashed((uint8_t const *)arg2);
  *(Signature **)&jresult = new Signature((const Signature &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_dash_blssignatures_blssignaturesJNI_PublicKey_1PUBLIC_1KEY_1SIZE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  result = bls::PublicKey::PUBLIC_KEY_SIZE;
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_dash_blssignatures_blssignaturesJNI_PublicKey_1FromBytes(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  uint8_t *arg1 = (uint8_t *) 0 ;
  SwigValueWrapper< bls::PublicKey > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(uint8_t **)&jarg1; 
  result = bls::PublicKey::FromBytes((uint8_t const *)arg1);
  *(bls::PublicKey **)&jresult = new bls::PublicKey((const bls::PublicKey &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_dash_blssignatures_blssignaturesJNI_PublicKey_1FromG1(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  g1_t *arg1 = (g1_t *) 0 ;
  SwigValueWrapper< bls::PublicKey > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(g1_t **)&jarg1; 
  result = bls::PublicKey::FromG1((g1_t const *)arg1);
  *(bls::PublicKey **)&jresult = new bls::PublicKey((const bls::PublicKey &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_dash_blssignatures_blssignaturesJNI_new_1PublicKey(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  bls::PublicKey *arg1 = 0 ;
  bls::PublicKey *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bls::PublicKey **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "bls::PublicKey const & reference is null");
    return 0;
  } 
  result = (bls::PublicKey *)new bls::PublicKey((bls::PublicKey const &)*arg1);
  *(bls::PublicKey **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_dash_blssignatures_blssignaturesJNI_PublicKey_1AggregateInsecure(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< bls::PublicKey > *arg1 = 0 ;
  SwigValueWrapper< bls::PublicKey > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< bls::PublicKey > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< bls::PublicKey > const & reference is null");
    return 0;
  } 
  result = bls::PublicKey::AggregateInsecure((std::vector< bls::PublicKey > const &)*arg1);
  *(bls::PublicKey **)&jresult = new bls::PublicKey((const bls::PublicKey &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_dash_blssignatures_blssignaturesJNI_PublicKey_1Aggregate(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< bls::PublicKey > *arg1 = 0 ;
  SwigValueWrapper< bls::PublicKey > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< bls::PublicKey > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< bls::PublicKey > const & reference is null");
    return 0;
  } 
  result = bls::PublicKey::Aggregate((std::vector< bls::PublicKey > const &)*arg1);
  *(bls::PublicKey **)&jresult = new bls::PublicKey((const bls::PublicKey &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_dash_blssignatures_blssignaturesJNI_PublicKey_1Serialize_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  bls::PublicKey *arg1 = (bls::PublicKey *) 0 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bls::PublicKey **)&jarg1; 
  arg2 = *(uint8_t **)&jarg2; 
  ((bls::PublicKey const *)arg1)->Serialize(arg2);
}


SWIGEXPORT jlong JNICALL Java_org_dash_blssignatures_blssignaturesJNI_PublicKey_1Serialize_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  bls::PublicKey *arg1 = (bls::PublicKey *) 0 ;
  std::vector< uint8_t > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bls::PublicKey **)&jarg1; 
  result = ((bls::PublicKey const *)arg1)->Serialize();
  *(std::vector< uint8_t > **)&jresult = new std::vector< uint8_t >((const std::vector< uint8_t > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_dash_blssignatures_blssignaturesJNI_PublicKey_1GetFingerprint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  bls::PublicKey *arg1 = (bls::PublicKey *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bls::PublicKey **)&jarg1; 
  result = ((bls::PublicKey const *)arg1)->GetFingerprint();
  *(uint32_t **)&jresult = new uint32_t((const uint32_t &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_dash_blssignatures_blssignaturesJNI_delete_1PublicKey(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  bls::PublicKey *arg1 = (bls::PublicKey *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(bls::PublicKey **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_dash_blssignatures_blssignaturesJNI_InsecureSignature_1SIGNATURE_1SIZE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  result = bls::InsecureSignature::SIGNATURE_SIZE;
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_dash_blssignatures_blssignaturesJNI_InsecureSignature_1FromBytes(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  uint8_t *arg1 = (uint8_t *) 0 ;
  SwigValueWrapper< bls::InsecureSignature > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(uint8_t **)&jarg1; 
  result = bls::InsecureSignature::FromBytes((uint8_t const *)arg1);
  *(bls::InsecureSignature **)&jresult = new bls::InsecureSignature((const bls::InsecureSignature &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_dash_blssignatures_blssignaturesJNI_InsecureSignature_1FromG2(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  g2_t *arg1 = (g2_t *) 0 ;
  SwigValueWrapper< bls::InsecureSignature > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(g2_t **)&jarg1; 
  result = bls::InsecureSignature::FromG2((g2_t const *)arg1);
  *(bls::InsecureSignature **)&jresult = new bls::InsecureSignature((const bls::InsecureSignature &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_dash_blssignatures_blssignaturesJNI_new_1InsecureSignature(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  bls::InsecureSignature *arg1 = 0 ;
  bls::InsecureSignature *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bls::InsecureSignature **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "bls::InsecureSignature const & reference is null");
    return 0;
  } 
  result = (bls::InsecureSignature *)new bls::InsecureSignature((bls::InsecureSignature const &)*arg1);
  *(bls::InsecureSignature **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_dash_blssignatures_blssignaturesJNI_InsecureSignature_1Verify(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  bls::InsecureSignature *arg1 = (bls::InsecureSignature *) 0 ;
  std::vector< uint8_t const * > *arg2 = 0 ;
  std::vector< bls::PublicKey > *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bls::InsecureSignature **)&jarg1; 
  arg2 = *(std::vector< uint8_t const * > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< uint8_t const * > const & reference is null");
    return 0;
  } 
  arg3 = *(std::vector< bls::PublicKey > **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< bls::PublicKey > const & reference is null");
    return 0;
  } 
  result = (bool)((bls::InsecureSignature const *)arg1)->Verify((std::vector< uint8_t const * > const &)*arg2,(std::vector< bls::PublicKey > const &)*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_dash_blssignatures_blssignaturesJNI_InsecureSignature_1Aggregate(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< bls::InsecureSignature > *arg1 = 0 ;
  SwigValueWrapper< bls::InsecureSignature > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< bls::InsecureSignature > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< bls::InsecureSignature > const & reference is null");
    return 0;
  } 
  result = bls::InsecureSignature::Aggregate((std::vector< bls::InsecureSignature > const &)*arg1);
  *(bls::InsecureSignature **)&jresult = new bls::InsecureSignature((const bls::InsecureSignature &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_dash_blssignatures_blssignaturesJNI_InsecureSignature_1DivideBy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  bls::InsecureSignature *arg1 = (bls::InsecureSignature *) 0 ;
  std::vector< bls::InsecureSignature > *arg2 = 0 ;
  SwigValueWrapper< bls::InsecureSignature > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bls::InsecureSignature **)&jarg1; 
  arg2 = *(std::vector< bls::InsecureSignature > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< bls::InsecureSignature > const & reference is null");
    return 0;
  } 
  result = ((bls::InsecureSignature const *)arg1)->DivideBy((std::vector< bls::InsecureSignature > const &)*arg2);
  *(bls::InsecureSignature **)&jresult = new bls::InsecureSignature((const bls::InsecureSignature &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_dash_blssignatures_blssignaturesJNI_InsecureSignature_1Serialize_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  bls::InsecureSignature *arg1 = (bls::InsecureSignature *) 0 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bls::InsecureSignature **)&jarg1; 
  arg2 = *(uint8_t **)&jarg2; 
  ((bls::InsecureSignature const *)arg1)->Serialize(arg2);
}


SWIGEXPORT jlong JNICALL Java_org_dash_blssignatures_blssignaturesJNI_InsecureSignature_1Serialize_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  bls::InsecureSignature *arg1 = (bls::InsecureSignature *) 0 ;
  std::vector< uint8_t > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bls::InsecureSignature **)&jarg1; 
  result = ((bls::InsecureSignature const *)arg1)->Serialize();
  *(std::vector< uint8_t > **)&jresult = new std::vector< uint8_t >((const std::vector< uint8_t > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_dash_blssignatures_blssignaturesJNI_delete_1InsecureSignature(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  bls::InsecureSignature *arg1 = (bls::InsecureSignature *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(bls::InsecureSignature **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_org_dash_blssignatures_blssignaturesJNI_Signature_1SIGNATURE_1SIZE_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  result = bls::Signature::SIGNATURE_SIZE;
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_dash_blssignatures_blssignaturesJNI_Signature_1FromBytes_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  uint8_t *arg1 = (uint8_t *) 0 ;
  SwigValueWrapper< bls::Signature > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(uint8_t **)&jarg1; 
  result = bls::Signature::FromBytes((uint8_t const *)arg1);
  *(bls::Signature **)&jresult = new bls::Signature((const bls::Signature &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_dash_blssignatures_blssignaturesJNI_Signature_1FromBytes_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  uint8_t *arg1 = (uint8_t *) 0 ;
  AggregationInfo *arg2 = 0 ;
  SwigValueWrapper< bls::Signature > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(uint8_t **)&jarg1; 
  arg2 = *(AggregationInfo **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AggregationInfo const & reference is null");
    return 0;
  } 
  result = bls::Signature::FromBytes((uint8_t const *)arg1,(AggregationInfo const &)*arg2);
  *(bls::Signature **)&jresult = new bls::Signature((const bls::Signature &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_dash_blssignatures_blssignaturesJNI_Signature_1FromG2_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  g2_t *arg1 = (g2_t *) 0 ;
  SwigValueWrapper< bls::Signature > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(g2_t **)&jarg1; 
  result = bls::Signature::FromG2((g2_t const *)arg1);
  *(bls::Signature **)&jresult = new bls::Signature((const bls::Signature &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_dash_blssignatures_blssignaturesJNI_Signature_1FromG2_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  g2_t *arg1 = (g2_t *) 0 ;
  AggregationInfo *arg2 = 0 ;
  SwigValueWrapper< bls::Signature > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(g2_t **)&jarg1; 
  arg2 = *(AggregationInfo **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AggregationInfo const & reference is null");
    return 0;
  } 
  result = bls::Signature::FromG2((g2_t const *)arg1,(AggregationInfo const &)*arg2);
  *(bls::Signature **)&jresult = new bls::Signature((const bls::Signature &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_dash_blssignatures_blssignaturesJNI_Signature_1FromInsecureSig_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  bls::InsecureSignature *arg1 = 0 ;
  SwigValueWrapper< bls::Signature > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bls::InsecureSignature **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "bls::InsecureSignature const & reference is null");
    return 0;
  } 
  result = bls::Signature::FromInsecureSig((bls::InsecureSignature const &)*arg1);
  *(bls::Signature **)&jresult = new bls::Signature((const bls::Signature &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_dash_blssignatures_blssignaturesJNI_Signature_1FromInsecureSig_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  bls::InsecureSignature *arg1 = 0 ;
  AggregationInfo *arg2 = 0 ;
  SwigValueWrapper< bls::Signature > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bls::InsecureSignature **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "bls::InsecureSignature const & reference is null");
    return 0;
  } 
  arg2 = *(AggregationInfo **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AggregationInfo const & reference is null");
    return 0;
  } 
  result = bls::Signature::FromInsecureSig((bls::InsecureSignature const &)*arg1,(AggregationInfo const &)*arg2);
  *(bls::Signature **)&jresult = new bls::Signature((const bls::Signature &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_dash_blssignatures_blssignaturesJNI_new_1Signature(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  bls::Signature *arg1 = 0 ;
  bls::Signature *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bls::Signature **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "bls::Signature const & reference is null");
    return 0;
  } 
  result = (bls::Signature *)new bls::Signature((bls::Signature const &)*arg1);
  *(bls::Signature **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_dash_blssignatures_blssignaturesJNI_Signature_1Verify(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  bls::Signature *arg1 = (bls::Signature *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bls::Signature **)&jarg1; 
  result = (bool)((bls::Signature const *)arg1)->Verify();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_dash_blssignatures_blssignaturesJNI_Signature_1AggregateSigs(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< bls::Signature > *arg1 = 0 ;
  SwigValueWrapper< bls::Signature > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< bls::Signature > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< bls::Signature > const & reference is null");
    return 0;
  } 
  result = bls::Signature::AggregateSigs((std::vector< bls::Signature > const &)*arg1);
  *(bls::Signature **)&jresult = new bls::Signature((const bls::Signature &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_dash_blssignatures_blssignaturesJNI_Signature_1DivideBy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  bls::Signature *arg1 = (bls::Signature *) 0 ;
  std::vector< bls::Signature > *arg2 = 0 ;
  SwigValueWrapper< bls::Signature > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bls::Signature **)&jarg1; 
  arg2 = *(std::vector< bls::Signature > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< bls::Signature > const & reference is null");
    return 0;
  } 
  result = ((bls::Signature const *)arg1)->DivideBy((std::vector< bls::Signature > const &)*arg2);
  *(bls::Signature **)&jresult = new bls::Signature((const bls::Signature &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_dash_blssignatures_blssignaturesJNI_Signature_1GetAggregationInfo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  bls::Signature *arg1 = (bls::Signature *) 0 ;
  AggregationInfo *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bls::Signature **)&jarg1; 
  result = (AggregationInfo *)((bls::Signature const *)arg1)->GetAggregationInfo();
  *(AggregationInfo **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_dash_blssignatures_blssignaturesJNI_Signature_1SetAggregationInfo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  bls::Signature *arg1 = (bls::Signature *) 0 ;
  AggregationInfo *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bls::Signature **)&jarg1; 
  arg2 = *(AggregationInfo **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "AggregationInfo const & reference is null");
    return ;
  } 
  (arg1)->SetAggregationInfo((AggregationInfo const &)*arg2);
}


SWIGEXPORT void JNICALL Java_org_dash_blssignatures_blssignaturesJNI_Signature_1Serialize_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  bls::Signature *arg1 = (bls::Signature *) 0 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bls::Signature **)&jarg1; 
  arg2 = *(uint8_t **)&jarg2; 
  ((bls::Signature const *)arg1)->Serialize(arg2);
}


SWIGEXPORT jlong JNICALL Java_org_dash_blssignatures_blssignaturesJNI_Signature_1Serialize_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  bls::Signature *arg1 = (bls::Signature *) 0 ;
  std::vector< uint8_t > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bls::Signature **)&jarg1; 
  result = ((bls::Signature const *)arg1)->Serialize();
  *(std::vector< uint8_t > **)&jresult = new std::vector< uint8_t >((const std::vector< uint8_t > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_dash_blssignatures_blssignaturesJNI_delete_1Signature(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  bls::Signature *arg1 = (bls::Signature *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(bls::Signature **)&jarg1; 
  delete arg1;
}


#ifdef __cplusplus
}
#endif

